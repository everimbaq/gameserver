%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.8
-module(myuser).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_enum_sex/1, enum_value_by_symbol_enum_sex/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("myuser.hrl").
-include("gpb.hrl").



-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #job{} -> e_msg_job(Msg, TrUserData);
      #identity{} -> e_msg_identity(Msg, TrUserData);
      #myuser{} -> e_msg_myuser(Msg, TrUserData)
    end.



e_msg_job(Msg, TrUserData) ->
    e_msg_job(Msg, <<>>, TrUserData).


e_msg_job(#job{company = F1, title = F2}, Bin,
	  TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_string(TrF2, <<B1/binary, 18>>)
	   end
    end.

e_msg_identity(Msg, TrUserData) ->
    e_msg_identity(Msg, <<>>, TrUserData).


e_msg_identity(#identity{name = F1, family = F2,
			 age = F3},
	       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true -> e_field_identity_family(TrF2, B1, TrUserData)
	   end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_type_int32(TrF3, <<B2/binary, 24>>)
	   end
    end.

e_msg_myuser(Msg, TrUserData) ->
    e_msg_myuser(Msg, <<>>, TrUserData).


e_msg_myuser(#myuser{id = F1, sex = F2, job = F3}, Bin,
	     TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_mfield_myuser_id(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_enum_enum_sex(TrF2, <<B1/binary, 16>>)
		end
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      if TrF3 == [] -> B2;
	 true -> e_field_myuser_job(TrF3, B2, TrUserData)
      end
    end.

e_field_identity_family([Elem | Rest], Bin,
			TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2),
    e_field_identity_family(Rest, Bin3, TrUserData);
e_field_identity_family([], Bin, _TrUserData) -> Bin.

e_mfield_myuser_id(Msg, Bin, TrUserData) ->
    SubBin = e_msg_identity(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_myuser_job(Msg, Bin, TrUserData) ->
    SubBin = e_msg_job(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_myuser_job([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_myuser_job(id(Elem, TrUserData), Bin2,
			       TrUserData),
    e_field_myuser_job(Rest, Bin3, TrUserData);
e_field_myuser_job([], Bin, _TrUserData) -> Bin.



e_enum_enum_sex('MALE', Bin) -> <<Bin/binary, 0>>;
e_enum_enum_sex('FAMALE', Bin) -> <<Bin/binary, 1>>;
e_enum_enum_sex('MAN', Bin) -> <<Bin/binary, 0>>;
e_enum_enum_sex('WOMAN', Bin) -> <<Bin/binary, 1>>;
e_enum_enum_sex(V, Bin) -> e_varint(V, Bin).

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      job -> d_msg_job(Bin, TrUserData);
      identity -> d_msg_identity(Bin, TrUserData);
      myuser -> d_msg_myuser(Bin, TrUserData)
    end.



d_msg_job(Bin, TrUserData) ->
    dfp_read_field_def_job(Bin, 0, 0,
			   id(undefined, TrUserData), id(undefined, TrUserData),
			   TrUserData).

dfp_read_field_def_job(<<8, Rest/binary>>, Z1, Z2, F1,
		       F2, TrUserData) ->
    d_field_job_company(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_job(<<18, Rest/binary>>, Z1, Z2, F1,
		       F2, TrUserData) ->
    d_field_job_title(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_job(<<>>, 0, 0, F1, F2, _) ->
    #job{company = F1, title = F2};
dfp_read_field_def_job(Other, Z1, Z2, F1, F2,
		       TrUserData) ->
    dg_read_field_def_job(Other, Z1, Z2, F1, F2,
			  TrUserData).

dg_read_field_def_job(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_job(Rest, N + 7, X bsl N + Acc, F1,
			  F2, TrUserData);
dg_read_field_def_job(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_job_company(Rest, 0, 0, F1, F2, TrUserData);
      18 -> d_field_job_title(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_job(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_job(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_job(Rest, 0, 0, F1, F2,
					  TrUserData);
	    5 -> skip_32_job(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_job(<<>>, 0, 0, F1, F2, _) ->
    #job{company = F1, title = F2}.

d_field_job_company(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, TrUserData)
    when N < 57 ->
    d_field_job_company(Rest, N + 7, X bsl N + Acc, F1, F2,
			TrUserData);
d_field_job_company(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_job(Rest, 0, 0, NewFValue, F2,
			   TrUserData).


d_field_job_title(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, TrUserData)
    when N < 57 ->
    d_field_job_title(Rest, N + 7, X bsl N + Acc, F1, F2,
		      TrUserData);
d_field_job_title(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
		  _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_job(Rest2, 0, 0, F1, NewFValue,
			   TrUserData).


skip_varint_job(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		F2, TrUserData) ->
    skip_varint_job(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_job(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		F2, TrUserData) ->
    dfp_read_field_def_job(Rest, Z1, Z2, F1, F2,
			   TrUserData).


skip_length_delimited_job(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_job(Rest, N + 7, X bsl N + Acc,
			      F1, F2, TrUserData);
skip_length_delimited_job(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_job(Rest2, 0, 0, F1, F2, TrUserData).


skip_32_job(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
	    TrUserData) ->
    dfp_read_field_def_job(Rest, Z1, Z2, F1, F2,
			   TrUserData).


skip_64_job(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
	    TrUserData) ->
    dfp_read_field_def_job(Rest, Z1, Z2, F1, F2,
			   TrUserData).


d_msg_identity(Bin, TrUserData) ->
    dfp_read_field_def_identity(Bin, 0, 0,
				id(undefined, TrUserData), id([], TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_identity(<<10, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, TrUserData) ->
    d_field_identity_name(Rest, Z1, Z2, F1, F2, F3,
			  TrUserData);
dfp_read_field_def_identity(<<18, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, TrUserData) ->
    d_field_identity_family(Rest, Z1, Z2, F1, F2, F3,
			    TrUserData);
dfp_read_field_def_identity(<<24, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, TrUserData) ->
    d_field_identity_age(Rest, Z1, Z2, F1, F2, F3,
			 TrUserData);
dfp_read_field_def_identity(<<>>, 0, 0, F1, F2, F3,
			    TrUserData) ->
    #identity{name = F1,
	      family = lists_reverse(F2, TrUserData), age = F3};
dfp_read_field_def_identity(Other, Z1, Z2, F1, F2, F3,
			    TrUserData) ->
    dg_read_field_def_identity(Other, Z1, Z2, F1, F2, F3,
			       TrUserData).

dg_read_field_def_identity(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_identity(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, TrUserData);
dg_read_field_def_identity(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_identity_name(Rest, 0, 0, F1, F2, F3,
				TrUserData);
      18 ->
	  d_field_identity_family(Rest, 0, 0, F1, F2, F3,
				  TrUserData);
      24 ->
	  d_field_identity_age(Rest, 0, 0, F1, F2, F3,
			       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_identity(Rest, 0, 0, F1, F2, F3,
				     TrUserData);
	    1 ->
		skip_64_identity(Rest, 0, 0, F1, F2, F3, TrUserData);
	    2 ->
		skip_length_delimited_identity(Rest, 0, 0, F1, F2, F3,
					       TrUserData);
	    5 ->
		skip_32_identity(Rest, 0, 0, F1, F2, F3, TrUserData)
	  end
    end;
dg_read_field_def_identity(<<>>, 0, 0, F1, F2, F3,
			   TrUserData) ->
    #identity{name = F1,
	      family = lists_reverse(F2, TrUserData), age = F3}.

d_field_identity_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_identity_name(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, TrUserData);
d_field_identity_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_identity(Rest2, 0, 0, NewFValue, F2,
				F3, TrUserData).


d_field_identity_family(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_identity_family(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, TrUserData);
d_field_identity_family(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_identity(Rest2, 0, 0, F1,
				cons(NewFValue, F2, TrUserData), F3,
				TrUserData).


d_field_identity_age(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_identity_age(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, TrUserData);
d_field_identity_age(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_identity(Rest, 0, 0, F1, F2,
				NewFValue, TrUserData).


skip_varint_identity(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, F3, TrUserData) ->
    skip_varint_identity(Rest, Z1, Z2, F1, F2, F3,
			 TrUserData);
skip_varint_identity(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, F3, TrUserData) ->
    dfp_read_field_def_identity(Rest, Z1, Z2, F1, F2, F3,
				TrUserData).


skip_length_delimited_identity(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_identity(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_identity(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_identity(Rest2, 0, 0, F1, F2, F3,
				TrUserData).


skip_32_identity(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		 F3, TrUserData) ->
    dfp_read_field_def_identity(Rest, Z1, Z2, F1, F2, F3,
				TrUserData).


skip_64_identity(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		 F3, TrUserData) ->
    dfp_read_field_def_identity(Rest, Z1, Z2, F1, F2, F3,
				TrUserData).


d_msg_myuser(Bin, TrUserData) ->
    dfp_read_field_def_myuser(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), id([], TrUserData),
			      TrUserData).

dfp_read_field_def_myuser(<<10, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, TrUserData) ->
    d_field_myuser_id(Rest, Z1, Z2, F1, F2, F3, TrUserData);
dfp_read_field_def_myuser(<<16, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, TrUserData) ->
    d_field_myuser_sex(Rest, Z1, Z2, F1, F2, F3,
		       TrUserData);
dfp_read_field_def_myuser(<<26, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, TrUserData) ->
    d_field_myuser_job(Rest, Z1, Z2, F1, F2, F3,
		       TrUserData);
dfp_read_field_def_myuser(<<>>, 0, 0, F1, F2, F3,
			  TrUserData) ->
    #myuser{id = F1, sex = F2,
	    job = lists_reverse(F3, TrUserData)};
dfp_read_field_def_myuser(Other, Z1, Z2, F1, F2, F3,
			  TrUserData) ->
    dg_read_field_def_myuser(Other, Z1, Z2, F1, F2, F3,
			     TrUserData).

dg_read_field_def_myuser(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_myuser(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, TrUserData);
dg_read_field_def_myuser(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_myuser_id(Rest, 0, 0, F1, F2, F3, TrUserData);
      16 ->
	  d_field_myuser_sex(Rest, 0, 0, F1, F2, F3, TrUserData);
      26 ->
	  d_field_myuser_job(Rest, 0, 0, F1, F2, F3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_myuser(Rest, 0, 0, F1, F2, F3, TrUserData);
	    1 -> skip_64_myuser(Rest, 0, 0, F1, F2, F3, TrUserData);
	    2 ->
		skip_length_delimited_myuser(Rest, 0, 0, F1, F2, F3,
					     TrUserData);
	    5 -> skip_32_myuser(Rest, 0, 0, F1, F2, F3, TrUserData)
	  end
    end;
dg_read_field_def_myuser(<<>>, 0, 0, F1, F2, F3,
			 TrUserData) ->
    #myuser{id = F1, sex = F2,
	    job = lists_reverse(F3, TrUserData)}.

d_field_myuser_id(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, TrUserData)
    when N < 57 ->
    d_field_myuser_id(Rest, N + 7, X bsl N + Acc, F1, F2,
		      F3, TrUserData);
d_field_myuser_id(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_identity(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_myuser(Rest2, 0, 0,
			      if F1 == undefined -> NewFValue;
				 true ->
				     merge_msg_identity(F1, NewFValue,
							TrUserData)
			      end,
			      F2, F3, TrUserData).


d_field_myuser_sex(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_myuser_sex(Rest, N + 7, X bsl N + Acc, F1, F2,
		       F3, TrUserData);
d_field_myuser_sex(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F1, _, F3, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_enum_sex(Tmp),
    dfp_read_field_def_myuser(Rest, 0, 0, F1, NewFValue, F3,
			      TrUserData).


d_field_myuser_job(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_myuser_job(Rest, N + 7, X bsl N + Acc, F1, F2,
		       F3, TrUserData);
d_field_myuser_job(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_job(Bs, TrUserData), TrUserData),
    dfp_read_field_def_myuser(Rest2, 0, 0, F1, F2,
			      cons(NewFValue, F3, TrUserData), TrUserData).


skip_varint_myuser(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F1, F2, F3, TrUserData) ->
    skip_varint_myuser(Rest, Z1, Z2, F1, F2, F3,
		       TrUserData);
skip_varint_myuser(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F1, F2, F3, TrUserData) ->
    dfp_read_field_def_myuser(Rest, Z1, Z2, F1, F2, F3,
			      TrUserData).


skip_length_delimited_myuser(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_myuser(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, TrUserData);
skip_length_delimited_myuser(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_myuser(Rest2, 0, 0, F1, F2, F3,
			      TrUserData).


skip_32_myuser(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
	       F3, TrUserData) ->
    dfp_read_field_def_myuser(Rest, Z1, Z2, F1, F2, F3,
			      TrUserData).


skip_64_myuser(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
	       F3, TrUserData) ->
    dfp_read_field_def_myuser(Rest, Z1, Z2, F1, F2, F3,
			      TrUserData).




d_enum_enum_sex(0) -> 'MALE';
d_enum_enum_sex(1) -> 'FAMALE';
d_enum_enum_sex(V) -> V.



merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #job{} -> merge_msg_job(Prev, New, TrUserData);
      #identity{} ->
	  merge_msg_identity(Prev, New, TrUserData);
      #myuser{} -> merge_msg_myuser(Prev, New, TrUserData)
    end.

merge_msg_job(#job{title = PFtitle},
	      #job{company = NFcompany, title = NFtitle}, _) ->
    #job{company = NFcompany,
	 title =
	     if NFtitle =:= undefined -> PFtitle;
		true -> NFtitle
	     end}.

merge_msg_identity(#identity{family = PFfamily,
			     age = PFage},
		   #identity{name = NFname, family = NFfamily,
			     age = NFage},
		   TrUserData) ->
    #identity{name = NFname,
	      family = 'erlang_++'(PFfamily, NFfamily, TrUserData),
	      age =
		  if NFage =:= undefined -> PFage;
		     true -> NFage
		  end}.

merge_msg_myuser(#myuser{id = PFid, sex = PFsex,
			 job = PFjob},
		 #myuser{id = NFid, sex = NFsex, job = NFjob},
		 TrUserData) ->
    #myuser{id =
		if PFid /= undefined, NFid /= undefined ->
		       merge_msg_identity(PFid, NFid, TrUserData);
		   PFid == undefined -> NFid;
		   NFid == undefined -> PFid
		end,
	    sex =
		if NFsex =:= undefined -> PFsex;
		   true -> NFsex
		end,
	    job = 'erlang_++'(PFjob, NFjob, TrUserData)}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #job{} -> v_msg_job(Msg, [job], TrUserData);
      #identity{} ->
	  v_msg_identity(Msg, [identity], TrUserData);
      #myuser{} -> v_msg_myuser(Msg, [myuser], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


v_msg_job(#job{company = F1, title = F2}, Path, _) ->
    v_type_int32(F1, [company | Path]),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [title | Path])
    end,
    ok;
v_msg_job(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, job}, X, Path).

v_msg_identity(#identity{name = F1, family = F2,
			 age = F3},
	       Path, _) ->
    v_type_string(F1, [name | Path]),
    if is_list(F2) ->
	   _ = [v_type_string(Elem, [family | Path])
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F2, Path)
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [age | Path])
    end,
    ok;
v_msg_identity(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, identity}, X, Path).

v_msg_myuser(#myuser{id = F1, sex = F2, job = F3}, Path,
	     TrUserData) ->
    v_msg_identity(F1, [id | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_enum_enum_sex(F2, [sex | Path])
    end,
    if is_list(F3) ->
	   _ = [v_msg_job(Elem, [job | Path], TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, job}}, F3, Path)
    end,
    ok.

v_enum_enum_sex('MALE', _Path) -> ok;
v_enum_enum_sex('FAMALE', _Path) -> ok;
v_enum_enum_sex('MAN', _Path) -> ok;
v_enum_enum_sex('WOMAN', _Path) -> ok;
v_enum_enum_sex(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_enum_sex(X, Path) ->
    mk_type_error({invalid_enum, enum_sex}, X, Path).

v_type_sint32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.



get_msg_defs() ->
    [{{enum, enum_sex},
      [{option, allow_alias, true}, {'MALE', 0},
       {'FAMALE', 1}, {'MAN', 0}, {'WOMAN', 1}]},
     {{msg, job},
      [#field{name = company, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = title, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, identity},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = family, fnum = 2, rnum = 3, type = string,
	      occurrence = repeated, opts = []},
       #field{name = age, fnum = 3, rnum = 4, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, myuser},
      [#field{name = id, fnum = 1, rnum = 2,
	      type = {msg, identity}, occurrence = required,
	      opts = []},
       #field{name = sex, fnum = 2, rnum = 3,
	      type = {enum, enum_sex}, occurrence = optional,
	      opts = []},
       #field{name = job, fnum = 3, rnum = 4,
	      type = {msg, job}, occurrence = repeated, opts = []}]}].


get_msg_names() -> [job, identity, myuser].


get_enum_names() -> [enum_sex].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(job) ->
    [#field{name = company, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = title, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def(identity) ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = family, fnum = 2, rnum = 3, type = string,
	    occurrence = repeated, opts = []},
     #field{name = age, fnum = 3, rnum = 4, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def(myuser) ->
    [#field{name = id, fnum = 1, rnum = 2,
	    type = {msg, identity}, occurrence = required,
	    opts = []},
     #field{name = sex, fnum = 2, rnum = 3,
	    type = {enum, enum_sex}, occurrence = optional,
	    opts = []},
     #field{name = job, fnum = 3, rnum = 4,
	    type = {msg, job}, occurrence = repeated, opts = []}];
find_msg_def(_) -> error.


find_enum_def(enum_sex) ->
    [{option, allow_alias, true}, {'MALE', 0},
     {'FAMALE', 1}, {'MAN', 0}, {'WOMAN', 1}];
find_enum_def(_) -> error.


enum_symbol_by_value(enum_sex, Value) ->
    enum_symbol_by_value_enum_sex(Value).


enum_value_by_symbol(enum_sex, Sym) ->
    enum_value_by_symbol_enum_sex(Sym).


enum_symbol_by_value_enum_sex(0) -> 'MALE';
enum_symbol_by_value_enum_sex(1) -> 'FAMALE'.


enum_value_by_symbol_enum_sex('MALE') -> 0;
enum_value_by_symbol_enum_sex('FAMALE') -> 1;
enum_value_by_symbol_enum_sex('MAN') -> 0;
enum_value_by_symbol_enum_sex('WOMAN') -> 1.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "3.26.8".

gpb_version_as_list() ->
    [3,26,8].
